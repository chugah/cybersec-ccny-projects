//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RunRandomSearch\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":8,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RunRandomSearch\"},\"Attributes\":[],\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RunQuantumSearch\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":50,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RunQuantumSearch\"},\"Attributes\":[],\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":51,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RunMultipleQuantumSearch\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":104,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":105,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RunMultipleQuantumSearch\"},\"Attributes\":[],\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":105,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RoundDigits\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"Internal\"}},\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":173,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":19},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"value\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"digits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":53}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Double\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Double\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" Rounds a number to a specific number of digits.\",\"\",\" # Input\",\" ## value\",\" The number to round.\",\" ## digits\",\" The number of digits to round to.\",\"\",\" # Output\",\" The rounded number.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples.DatabaseSearch\",\"Name\":\"RoundDigits\"},\"Attributes\":[],\"SourceFile\":\"/Users/sdbar/Desktop/q-sharp-grover/Program.qs\",\"Position\":{\"Item1\":173,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":19},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
#line hidden
namespace Microsoft.Quantum.Samples.DatabaseSearch
{
    [SourceLocation("/Users/sdbar/Desktop/q-sharp-grover/Program.qs", OperationFunctor.Body, 10, 52)]
    public partial class RunRandomSearch : Operation<QVoid, QVoid>, ICallable
    {
        public RunRandomSearch(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RunRandomSearch";
        String ICallable.FullName => "Microsoft.Quantum.Samples.DatabaseSearch.RunRandomSearch";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(RunRandomSearch));
        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), (Result,IQArray<Result>)> ApplyQuantumSearch__
        {
            get;
            set;
        }

        private protected ICallable<(Double,Int64), Double> RoundDigits__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 14 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var nIterations = 0L;
#line 18 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var nDatabaseQubits = 3L;
#line 19 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var databaseSize = 2L.Pow(nDatabaseQubits);
#line 24 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var classicalSuccessProbability = (1D / Microsoft__Quantum__Convert__IntAsDouble.Apply(databaseSize));
#line 25 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var repeats = 1000L;
#line 26 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var successCount = 0L;
#line 28 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            Message__.Apply((("Classical random search for marked element in database.\n" + String.Format("  Database size: {0}.\n", databaseSize)) + String.Format("  Success probability:  {0}\n", classicalSuccessProbability)));
#line 34 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            foreach (var attempt in new QRange(1L, repeats))
#line hidden
            {
#line 36 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                var (markedQubit,databaseRegister) = ((Result,IQArray<Result>))ApplyQuantumSearch__.Apply((nIterations, nDatabaseQubits));
#line 37 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                successCount = (successCount + ((markedQubit == Result.One) ? 1L : 0L));
#line 40 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                if (((attempt % 100L) == 0L))
                {
#line 41 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                    Message__.Apply((((String.Format("Attempt {0}. ", attempt) + String.Format("Success: {0},  ", markedQubit)) + String.Format("Probability: {0} ", RoundDigits__.Apply(((Microsoft__Quantum__Convert__IntAsDouble.Apply(successCount) / Microsoft__Quantum__Convert__IntAsDouble.Apply(attempt)), 3L)))) + String.Format("Found database index {0}", databaseRegister)));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.ApplyQuantumSearch__ = this.__Factory__.Get<ICallable<(Int64,Int64), (Result,IQArray<Result>)>>(typeof(ApplyQuantumSearch));
            this.RoundDigits__ = this.__Factory__.Get<ICallable<(Double,Int64), Double>>(typeof(RoundDigits));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<RunRandomSearch, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/sdbar/Desktop/q-sharp-grover/Program.qs", OperationFunctor.Body, 52, 106)]
    public partial class RunQuantumSearch : Operation<QVoid, QVoid>, ICallable
    {
        public RunQuantumSearch(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RunQuantumSearch";
        String ICallable.FullName => "Microsoft.Quantum.Samples.DatabaseSearch.RunQuantumSearch";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(RunQuantumSearch));
        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sin
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__ArcSin
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), (Result,IQArray<Result>)> ApplyQuantumSearch__
        {
            get;
            set;
        }

        private protected ICallable<(Double,Int64), Double> RoundDigits__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 57 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var nDatabaseQubits = 6L;
#line 58 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var databaseSize = 2L.Pow(nDatabaseQubits);
#line 61 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var nIterations = 3L;
#line 64 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var queries = ((nIterations * 2L) + 1L);
#line 68 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var classicalSuccessProbability = (1D / Microsoft__Quantum__Convert__IntAsDouble.Apply(databaseSize));
#line 69 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var quantumSuccessProbability = Microsoft__Quantum__Math__Sin.Apply((((2D * Microsoft__Quantum__Convert__IntAsDouble.Apply(nIterations)) + 1D) * Microsoft__Quantum__Math__ArcSin.Apply((1D / Microsoft__Quantum__Math__Sqrt.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(databaseSize)))))).Pow(2D);
#line 70 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var repeats = 100L;
#line 71 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var successCount = 0L;
#line 73 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            Message__.Apply((((("\n\nQuantum search for marked element in database.\n" + String.Format("  Database size: {0}.\n", databaseSize)) + String.Format("  Classical success probability: {0}\n", classicalSuccessProbability)) + String.Format("  Queries per search: {0} \n", queries)) + String.Format("  Quantum success probability: {0}\n", quantumSuccessProbability)));
#line 81 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            foreach (var attempt in new QRange(1L, repeats))
#line hidden
            {
#line 83 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                var (markedQubit,databaseRegister) = ((Result,IQArray<Result>))ApplyQuantumSearch__.Apply((nIterations, nDatabaseQubits));
#line 84 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                successCount = (successCount + ((markedQubit == Result.One) ? 1L : 0L));
#line 87 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                if (((attempt % 10L) == 0L))
                {
#line 88 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                    var empiricalSuccessProbability = RoundDigits__.Apply(((Microsoft__Quantum__Convert__IntAsDouble.Apply(successCount) / Microsoft__Quantum__Convert__IntAsDouble.Apply(attempt)), 3L));
#line 92 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                    var speedupFactor = RoundDigits__.Apply((((empiricalSuccessProbability / classicalSuccessProbability) / Microsoft__Quantum__Convert__IntAsDouble.Apply(queries)), 3L));
#line 94 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                    Message__.Apply(((((String.Format("Attempt {0}. ", attempt) + String.Format("Success: {0},  ", markedQubit)) + String.Format("Probability: {0} ", empiricalSuccessProbability)) + String.Format("Speedup: {0} ", speedupFactor)) + String.Format("Found database index {0}", databaseRegister)));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__Sin = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sin));
            this.Microsoft__Quantum__Math__ArcSin = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.ArcSin));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.ApplyQuantumSearch__ = this.__Factory__.Get<ICallable<(Int64,Int64), (Result,IQArray<Result>)>>(typeof(ApplyQuantumSearch));
            this.RoundDigits__ = this.__Factory__.Get<ICallable<(Double,Int64), Double>>(typeof(RoundDigits));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<RunQuantumSearch, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/sdbar/Desktop/q-sharp-grover/Program.qs", OperationFunctor.Body, 106, 174)]
    public partial class RunMultipleQuantumSearch : Operation<QVoid, QVoid>, ICallable
    {
        public RunMultipleQuantumSearch(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RunMultipleQuantumSearch";
        String ICallable.FullName => "Microsoft.Quantum.Samples.DatabaseSearch.RunMultipleQuantumSearch";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(RunMultipleQuantumSearch));
        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sin
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__ArcSin
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Int64>,Int64,Int64), (Result,Int64)> ApplyGroverSearch__
        {
            get;
            set;
        }

        private protected ICallable<(Double,Int64), Double> RoundDigits__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 112 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var nDatabaseQubits = 8L;
#line 113 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var databaseSize = 2L.Pow(nDatabaseQubits);
#line 116 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var markedElements = (IQArray<Int64>)new QArray<Int64>(0L, 39L, 101L, 234L);
#line 117 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var nMarkedElements = markedElements.Length;
#line 120 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var nIterations = 3L;
#line 123 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var queries = ((nIterations * 2L) + 1L);
#line 127 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var classicalSuccessProbability = (Microsoft__Quantum__Convert__IntAsDouble.Apply(nMarkedElements) / Microsoft__Quantum__Convert__IntAsDouble.Apply(databaseSize));
#line 128 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var quantumSuccessProbability = Microsoft__Quantum__Math__Sin.Apply((((2D * Microsoft__Quantum__Convert__IntAsDouble.Apply(nIterations)) + 1D) * Microsoft__Quantum__Math__ArcSin.Apply((Microsoft__Quantum__Math__Sqrt.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(nMarkedElements)) / Microsoft__Quantum__Math__Sqrt.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(databaseSize)))))).Pow(2D);
#line 129 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var repeats = 10L;
#line 130 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            var successCount = 0L;
#line 132 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            Message__.Apply(((((("\n\nQuantum search for marked element in database.\n" + String.Format("  Database size: {0}.\n", databaseSize)) + String.Format("  Marked elements: {0}", markedElements)) + String.Format("  Classical success probability: {0}\n", classicalSuccessProbability)) + String.Format("  Queries per search: {0} \n", queries)) + String.Format("  Quantum success probability: {0}\n", quantumSuccessProbability)));
#line 141 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            foreach (var attempt in new QRange(1L, repeats))
#line hidden
            {
#line 143 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                var (markedQubit,databaseRegister) = ApplyGroverSearch__.Apply((markedElements, nIterations, nDatabaseQubits));
#line 144 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                successCount = (successCount + ((markedQubit == Result.One) ? 1L : 0L));
#line 147 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                var empiricalSuccessProbability = RoundDigits__.Apply(((Microsoft__Quantum__Convert__IntAsDouble.Apply(successCount) / Microsoft__Quantum__Convert__IntAsDouble.Apply(attempt)), 3L));
#line 151 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                var speedupFactor = RoundDigits__.Apply((((empiricalSuccessProbability / classicalSuccessProbability) / Microsoft__Quantum__Convert__IntAsDouble.Apply(queries)), 3L));
#line 153 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
                Message__.Apply(((((String.Format("Attempt {0}. ", attempt) + String.Format("Success: {0},  ", markedQubit)) + String.Format("Probability: {0} ", empiricalSuccessProbability)) + String.Format("Speedup: {0} ", speedupFactor)) + String.Format("Found database index {0}", databaseRegister)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__Sin = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sin));
            this.Microsoft__Quantum__Math__ArcSin = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.ArcSin));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.ApplyGroverSearch__ = this.__Factory__.Get<ICallable<(IQArray<Int64>,Int64,Int64), (Result,Int64)>>(typeof(ApplyGroverSearch));
            this.RoundDigits__ = this.__Factory__.Get<ICallable<(Double,Int64), Double>>(typeof(RoundDigits));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<RunMultipleQuantumSearch, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/sdbar/Desktop/q-sharp-grover/Program.qs", OperationFunctor.Body, 174, -1)]
    internal partial class RoundDigits : Function<(Double,Int64), Double>, ICallable
    {
        public RoundDigits(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Double,Int64)>, IApplyData
        {
            public In((Double,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "RoundDigits";
        String ICallable.FullName => "Microsoft.Quantum.Samples.DatabaseSearch.RoundDigits";
        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Round
        {
            get;
            set;
        }

        public override Func<(Double,Int64), Double> __Body__ => (__in__) =>
        {
            var (value,digits) = __in__;
#line 175 "/Users/sdbar/Desktop/q-sharp-grover/Program.qs"
            return (Microsoft__Quantum__Convert__IntAsDouble.Apply(Microsoft__Quantum__Math__Round.Apply((value * 10D.Pow(Microsoft__Quantum__Convert__IntAsDouble.Apply(digits))))) / 10D.Pow(Microsoft__Quantum__Convert__IntAsDouble.Apply(digits)));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__Round = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
        }

        public override IApplyData __DataIn__((Double,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Double data) => new QTuple<Double>(data);
        public static System.Threading.Tasks.Task<Double> Run(IOperationFactory __m__, Double value, Int64 digits)
        {
            return __m__.Run<RoundDigits, (Double,Int64), Double>((value, digits));
        }
    }
}